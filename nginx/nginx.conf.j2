user                              nginx;
worker_processes                  {{ ansible_processor_vcpus }};
pid                               /var/run/nginx.pid;

error_log                         /var/log/nginx/error.log warn;

events {
  use                             epoll;
  worker_connections              2048;
}

http {
  sendfile                        on;
  tcp_nopush                      on;
  tcp_nodelay                     on;
  keepalive_timeout               65;
  types_hash_max_size             2048;
  reset_timedout_connection       on;
  ignore_invalid_headers          on;

  server_name_in_redirect         off;
  server_tokens                   off;
  server_names_hash_max_size      512;
  server_names_hash_bucket_size   128;

  # Log client body:
  client_body_in_file_only        on;

  include                         /etc/nginx/mime.types;
  default_type                    application/octet-stream;

  log_format custom_nginx_log
    '$time_iso8601 $remote_addr $http_user_agent [$status] "$host $request" [$request_uri | $query_string]';

  log_format get_headers_nginx_log
    '$time_iso8601 $remote_addr $http_user_agent [$status] "$host $request" [$request_uri | $query_string]'
    '"$http_referer" "$request_body" "$http_Authorization" "$http_x_duid" "$http_x_ver" "$upstream_http_x_rqid"';

  # log_format body_nginx_log
    # '$time_iso8601 $remote_addr $http_user_agent [$status] "$host $request" [$request_uri | $query_string] $request_body_file=';

  log_format fluentd
    '$remote_addr $host $upstream_addr $remote_user [$time_local] '
    '$status $body_bytes_sent $request_time $upstream_response_time $pipe '
    '"$request" "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

  log_format combined_plus
    ' $remote_addr - $remote_user [$time_local] "$request"'
    ' $status $body_bytes_sent "$http_referer" "$http_user_agent"'
    ' $request_time [$upstream_response_time] "$gzip_ratio"'
    ' $upstream_cache_status $http_x_forwarded_for $uid_got $uid_set';

  log_format extended
    ' site="$server_name" server="$host‚Äù dest_port="$server_port" dest_ip="$server_addr" '
    ' src="$remote_addr" src_ip="$realip_remote_addr" user="$remote_user" '
    ' time_local="$time_local" protocol="$server_protocol" status="$status" '
    ' bytes_out="$bytes_sent" bytes_in="$upstream_bytes_received" '
    ' http_referer="$http_referer" http_user_agent="$http_user_agent" '
    ' nginx_version="$nginx_version" http_x_forwarded_for="$http_x_forwarded_for" '
    ' http_x_header="$http_x_header" uri_query="$query_string" uri_path="$uri" '
    ' http_method="$request_method" response_time="$upstream_response_time" '
    ' cookie="$http_cookie" request_time="$request_time" ';

  access_log                      /var/log/nginx/access.log custom_nginx_log;
  error_log                       /var/log/nginx/error.log warn;
  # access_log                      /dev/stdout htc_nginx_log;
  # error_log                       /dev/stdout info;

  # ----------------- Proxy Section
  map $http_upgrade               $connection_upgrade {
        default                   Upgrade;
        ''                        close;
  }
  proxy_read_timeout              30m;

  # Compression
  # Enable Gzip compressed.
  gzip                            on;
  gzip_disable                    "msie6";
  gzip_http_version               1.1;
  gzip_comp_level                 5;
  # gzip_min_length                 256;
  gzip_proxied                    any;
  gzip_vary                       on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types                      *;
                                  # application/atom+xml
                                  # application/javascript
                                  # application/json
                                  # application/rss+xml
                                  # application/vnd.ms-fontobject
                                  # application/x-font-ttf
                                  # application/x-web-app-manifest+json
                                  # application/xhtml+xml
                                  # application/xml
                                  # font/opentype
                                  # image/svg+xml
                                  # image/x-icon
                                  # text/css
                                  # text/plain
                                  # text/x-component;

  ssl_certificate                 /etc/nginx/ssl/example.com.crt;
  ssl_certificate_key             /etc/nginx/ssl/example.com.key;
  ssl_prefer_server_ciphers       on;
  ssl_protocols                   TLSv1 TLSv1.1 TLSv1.2;
  # ssl_ciphers                     HIGH:!aNULL:!MD5;
  ssl_ciphers                     'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

  ssl_session_cache               shared:SSL:50m;
  ssl_session_timeout             1d;
  ssl_session_tickets             off;

  ssl_dhparam                     /etc/nginx/ssl/dhparam.pem;

  resolver                        8.8.8.8 8.8.4.4;
  ssl_stapling                    on;
  ssl_stapling_verify             on;
  ssl_trusted_certificate         /etc/nginx/ssl/example.com.crt;

  include                         /etc/nginx/inc/security-headers.inc;
  include                         /etc/nginx/conf.d/*.conf;

# ---------------------------- DEFAULT REDIRECT ----------------------
  server {
    listen                        80;
    listen                        [::]:80;
    listen                        443 ssl http2;
    listen                        [::]:443 ssl http2;

    server_name                   *.example.com;
    # return                        301 https://$host$request_uri;
    rewrite                       ^ https://example.com redirect;
  }

}
